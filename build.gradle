plugins {
    id "org.springframework.boot" version "2.2.2.RELEASE"
}

allprojects
        {
            apply plugin: 'java-library'

            sourceCompatibility = 1.8
            targetCompatibility = 1.8

            repositories {
                jcenter()
                mavenCentral()
                maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
                maven { url 'https://jitpack.io' }
            }
        }


subprojects
        {
            dependencies {
                testCompile 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
            }

            task sourcesJar(type: Jar) {
                from sourceSets.main.allJava
                archiveClassifier = 'sources'
            }

            javadoc.failOnError = false
            task javadocJar(type: Jar) {
                from javadoc
                archiveClassifier = 'javadoc'
            }
        }


dependencies {


    //-- use these dependencies to pull the inversion build assets from Maven
    //-- make sure to set ${inversionVersion} to your desired version in gradle.properties
    //--
    //-- If you want to checkout the inversion-engine core project to do simultaneous
    //-- development on any of the core sub-projects and your own project, you
    //-- can use local project dependencies instead of maven dependencies.
    //-- To have a local project override your maven dependencies simply
    //-- uncomment the line "includeBuild '../inversion-engine'" in the supplied
    //-- settings.gradle file and gradle will use the local project.
    //-- IMPORTANT the supplied Dockerfile will not work with these local project dependencies
    //-- so make sure "includeBuild '../inversion-engine'" is commented OUT when using Docker.
    compile "io.inversion:inversion-api:${inversionVersion}"
    compile "io.inversion:inversion-jdbc:${inversionVersion}"
    compile "io.inversion:inversion-spring-boot:${inversionVersion}"

    //-- Alternatively, you can use jitpack to import dependencies directly from github.
    //-- You can use these dependencies instead of the above dependencies to stay on the cutting edge.
    //compile 'com.github.inversion-api.inversion-engine:inversion-api:master-SNAPSHOT'
    //compile 'com.github.inversion-api.inversion-engine:inversion-jdbc:master-SNAPSHOT'
    //compile 'com.github.inversion-api.inversion-engine:inversion-spring-boot:master-SNAPSHOT'

}

//-- If your project has more than one class with a main(String[] args)
//-- method in it, then you need to tell Spring Boot which one to run
//springBoot {
//	mainClassName = 'me.repackage.SpringBootQuickstartMain'
//}


task run(type:JavaExec) {
    main = "me.repackage.SpringBootQuickstartMain"
    classpath = sourceSets.main.runtimeClasspath
    systemProperties System.getProperties()
}


task demo(type:JavaExec) {
    main = "me.repackage.SpringBootQuickstartMain"
    classpath = sourceSets.main.runtimeClasspath
    systemProperties System.getProperties()
    systemProperty 'db.class', System.getProperty('db.class', 'io.inversion.jdbc.JdbcDb')
    systemProperty 'db.url', System.getProperty('db.url', 'jdbc:h2:mem:northwind;DB_CLOSE_DELAY=-1')
    systemProperty 'db.user', System.getProperty('db.user', 'sa')
    systemProperty 'db.pass', System.getProperty('db.pass', '')
    systemProperty 'db.ddlUrls', System.getProperty('db.ddlUrls', 'io/inversion/jdbc/northwind-h2.ddl')
}