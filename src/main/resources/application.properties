server.port=8080

#-- These properties are wired into the example class SpringConfiguration

customApi.apiName=custom
customApi.methods=GET
customApi.paths=greeting/*

customAction.property1=peas
customAction.property2=carrots

customComponent.greeting=Spring Boot and Inversion go together like ${customAction.property1} and ${customAction.property2}!


#-- The properties below would normally be put into inversion*.properties files but Inversion's
#-- Spring integration is smart enough to pull properties from BOTH the Spring Environment PropertySources
#-- and any inversion*.properties files that our found.  Properties from inversion*.properties files
#-- will override the Spring PropertySources values.
#--
#-- As always with Spring Boot, you can put additional environment specific props into
#-- application-${spring.profiles.active}.properties files.
#--
#-- Inversion uses a reflective DI step to set declared properties on Inversion framework classes
#-- that have not been Spring Boot annotated.  If you give an Inversion framework class a "name"
#-- property, you can set properties of that bean simply by setting "beanName.propertyName=value"
#-- in this file.
#--
#-- The Inversion Config also pulls properties from an optional .env file, or env vars or sys props
#-- so you can keep secrets like passwords out of your source files.
#--
#-- @see https://inversion-api.github.io/inversion-engine/javadoc/io/inversion/utils/Config.html
#-- @see https://inversion-api.github.io/inversion-engine/javadoc/io/inversion/utils/Configurator.html


#northwindDb.class=io.inversion.jdbc.JdbcDb                 -- this was created in the InversionWiredConfig Spring bean.
#northwindDb.driver=org.h2.Driver                           -- driver can be inferred for h2,mysql,postgres,sqlserver
northwindDb.url=jdbc:h2:mem:northwind;DB_CLOSE_DELAY=-1   
#-- this is demo ddl that will initialize the in-memory H2 "northwind" schema
northwindDb.ddlUrls=io/inversion/jdbc/northwind-h2.ddl
#-- you really should put secrets like user names and passwords into a ".env" for development file or container environment vars for a key vault for production
northwindDb.user=sa
northwindDb.pass=


#-- Generally when using Spring Boot, developers will create their Api objects in their Java code.  You can
#-- however directly declare objects and assign most object properties through Inversion's Configurator DI.
#-- The properties below do whe same work as the Java config in InversionWiredConfig.
#--
#-- If you commented out the method SpringConfiguration.buildNorthwindApi() and uncommented the lines
#-- below, your resulting Api would be exactly the same.

#northwindDb.class=io.inversion.jdbc.JdbcDb
#northwindDbAction.class=io.inversion.action.db.DbAction
#northwindEndpoint.class=io.inversion.Endpoint
#northwindEndpoint.actions=northwindDbAction

#northwind.class=io.inversion.Api
#northwind.dbs=northwindDb
#northwind.endpoints=northwindEndpoint



status.class=io.inversion.Api
status.endpoints=statusEndpoint

statusEndpoint.class=io.inversion.Endpoint
statusEndpoint.actions=status200Action,status404Action

status200Action.class=io.inversion.action.misc.MockAction
status200Action.status=200 OK
status200Action.includeOn=200/*

status404Action.class=io.inversion.action.misc.MockAction
status404Action.status=404 Not Found
status404Action.includeOn=404/*
